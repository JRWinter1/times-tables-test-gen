{"version":3,"sources":["model.ts","components/Configuration.tsx","question-generator/questionGenerator.ts","components/AnswerBox.tsx","components/TimesTable.tsx","components/Division.tsx","components/TestGrid.tsx","App.tsx","index.tsx"],"names":["numberOptions","Array","from","keys","map","number","defaultNumberExcludes","useStyles","makeStyles","theme","root","display","formControl","margin","spacing","width","columnsAndRowsFormControl","noPadding","paddingTop","paddingBottom","buttonContainer","justifyContent","flexGrow","columnOptions","rowOptions","MenuProps","PaperProps","style","maxHeight","length","Configuration","props","classes","className","FormControl","InputLabel","Select","multiple","value","selectedNumbers","onChange","event","onSelectedNumbersChanged","target","input","Input","renderValue","selected","sort","one","two","join","x","MenuItem","Checkbox","size","checked","indexOf","ListItemText","primary","columns","onNumberOfColumnsChanged","rows","onNumberOfRowsChanged","ButtonGroup","orientation","variant","color","IconButton","onClick","onIncreaseFontSize","onDecreaseFontSize","Button","window","print","onGenerate","getRandomNumberFromPool","numberPool","Math","floor","random","questionVaraiblesGenerator","totalToGenerate","current","filter","partial11Filter","filteredNumberPool","filterEasy11TimesTable","deDuped","filterDuplicates","c","y","v","push","n","totalOver10","chosenX","currentVariables","findIndex","borderStyle","borderWidth","height","TestGrid","clsx","TimesTable","padding","indent","marginLeft","typography","fontSize","console","log","valueToHide","showAnswers","defaultProps","isFlipped","renderAnswer","AnswerBox","Typography","variables","renderVariables","gridTemplateColumns","numberOfColumns","gridTemplateRows","numberOfRows","item","borderColor","palette","grey","i","Division","container","paper","marginBottom","backgroundColor","title","App","React","useState","numberOfcolumns","setNumberOfColumns","setNumberOfRows","setSelectedNumbers","questionVariables","setQuestionVariables","setFontSize","Paper","varaibles","numbers","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9b83b109.chunk.js","sourcesContent":["export const numberOptions = Array.from(Array(15).keys()).map(number => { return number + 1 });\r\n\r\nexport const defaultNumberExcludes = [1, 2, 5, 10, 13, 14, 15];","import React from \"react\";\r\nimport {\r\n  makeStyles,\r\n  Theme,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  Input,\r\n  MenuItem,\r\n  Checkbox,\r\n  ListItemText,\r\n  Button,\r\n  IconButton,\r\n  ButtonGroup,\r\n} from \"@material-ui/core\";\r\nimport { numberOptions } from \"../model\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => {\r\n  return {\r\n    root: {\r\n      display: \"flex\",\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      width: 250,\r\n    },\r\n    columnsAndRowsFormControl: {\r\n      margin: theme.spacing(1),\r\n      width: 150,\r\n    },\r\n    noPadding: {\r\n      paddingTop: 0,\r\n      paddingBottom: 0,\r\n    },\r\n    buttonContainer: {\r\n      display: \"flex\",\r\n      justifyContent: \"space-around\",\r\n      flexGrow: 1,\r\n    },\r\n  };\r\n});\r\n\r\nconst columnOptions = Array.from(Array(8).keys()).map((number) => {\r\n  return number + 1;\r\n});\r\n\r\nconst rowOptions = Array.from(Array(12).keys()).map((number) => {\r\n  return number + 1;\r\n});\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * numberOptions.length + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\ninterface Props {\r\n  readonly columns: number;\r\n  readonly rows: number;\r\n  readonly selectedNumbers: ReadonlyArray<number>;\r\n  readonly onSelectedNumbersChanged: (numbers: ReadonlyArray<number>) => void;\r\n  readonly onNumberOfColumnsChanged: (x: number) => void;\r\n  readonly onNumberOfRowsChanged: (x: number) => void;\r\n  readonly onGenerate: () => void;\r\n  readonly onDecreaseFontSize: () => void;\r\n  readonly onIncreaseFontSize: () => void;\r\n}\r\n\r\nconst Configuration: React.FC<Props> = (props: Props) => {\r\n  const handleSelectedNumbersChanged = (\r\n    event: React.ChangeEvent<{ value: unknown }>\r\n  ) => {\r\n    props.onSelectedNumbersChanged(event.target.value as number[]);\r\n  };\r\n\r\n  const handleRowsChanged = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    props.onNumberOfRowsChanged(event.target.value as number);\r\n  };\r\n\r\n  const handleColumnsChanged = (\r\n    event: React.ChangeEvent<{ value: unknown }>\r\n  ) => {\r\n    props.onNumberOfColumnsChanged(event.target.value as number);\r\n  };\r\n\r\n  const handlePrint = () => {\r\n    window.print();\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <FormControl className={classes.formControl}>\r\n        <InputLabel>Numbers To Include</InputLabel>\r\n        <Select\r\n          multiple={true}\r\n          value={props.selectedNumbers}\r\n          onChange={handleSelectedNumbersChanged}\r\n          input={<Input />}\r\n          renderValue={(selected) =>\r\n            (selected as number[])\r\n              .sort((one, two) => (one < two ? -1 : 1))\r\n              .join(\", \")\r\n          }\r\n          MenuProps={MenuProps}\r\n        >\r\n          {numberOptions.map((x) => {\r\n            return (\r\n              <MenuItem className={classes.noPadding} key={x} value={x}>\r\n                <Checkbox\r\n                  size=\"small\"\r\n                  checked={props.selectedNumbers.indexOf(x) > -1}\r\n                />\r\n                <ListItemText primary={x} />\r\n              </MenuItem>\r\n            );\r\n          })}\r\n        </Select>\r\n      </FormControl>\r\n      <FormControl className={classes.columnsAndRowsFormControl}>\r\n        <InputLabel>No. of Columns</InputLabel>\r\n        <Select\r\n          value={props.columns}\r\n          onChange={handleColumnsChanged}\r\n          MenuProps={MenuProps}\r\n          input={<Input />}\r\n          renderValue={(selected) => selected as string}\r\n        >\r\n          {columnOptions.map((x) => {\r\n            return (\r\n              <MenuItem className={classes.noPadding} key={x} value={x}>\r\n                <ListItemText primary={x} />\r\n              </MenuItem>\r\n            );\r\n          })}\r\n        </Select>\r\n      </FormControl>\r\n      <FormControl className={classes.columnsAndRowsFormControl}>\r\n        <InputLabel>No. of Rows</InputLabel>\r\n        <Select\r\n          value={props.rows}\r\n          onChange={handleRowsChanged}\r\n          MenuProps={MenuProps}\r\n          input={<Input />}\r\n          renderValue={(selected) => selected as string}\r\n          className={classes.noPadding}\r\n        >\r\n          {rowOptions.map((x) => {\r\n            return (\r\n              <MenuItem className={classes.noPadding} key={x} value={x}>\r\n                <ListItemText primary={x} />\r\n              </MenuItem>\r\n            );\r\n          })}\r\n        </Select>\r\n      </FormControl>\r\n      <div className={classes.buttonContainer}>\r\n        <ButtonGroup orientation=\"vertical\" variant=\"contained\" color=\"primary\">\r\n          <IconButton onClick={props.onIncreaseFontSize}>\r\n            <AddIcon />\r\n          </IconButton>\r\n          <IconButton onClick={props.onDecreaseFontSize}>\r\n            <RemoveIcon />\r\n          </IconButton>\r\n        </ButtonGroup>\r\n      </div>\r\n      <div className={classes.buttonContainer}>\r\n        <Button variant=\"contained\" onClick={handlePrint}>\r\n          Print\r\n        </Button>\r\n        <Button variant=\"contained\" onClick={props.onGenerate}>\r\n          Generate\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Configuration;\r\n","import { QuestionVaraibles } from \"./model\";\r\n\r\nconst getRandomNumberFromPool = (numberPool: ReadonlyArray<number>) => {\r\n\r\n  const index = Math.floor(Math.random() * numberPool.length);\r\n  \r\n  return numberPool[index];\r\n};\r\n\r\nexport const questionVaraiblesGenerator = (\r\n  numberPool: ReadonlyArray<number>,\r\n  totalToGenerate: number\r\n): ReadonlyArray<QuestionVaraibles> => {\r\n  var current = new Array<QuestionVaraibles>();\r\n\r\n  return Array.from(Array(totalToGenerate).keys()).map(() => {\r\n    const x = getRandomNumberFromPool(numberPool.filter(partial11Filter(numberPool)));\r\n\r\n    const filteredNumberPool = numberPool.filter(filterEasy11TimesTable(x));\r\n\r\n    const deDuped = filteredNumberPool.filter(filterDuplicates(x, current));\r\n\r\n    // Id dedpued length is 0, we have exhausted all possible outcomes so remove x from the deduping array.\r\n    if (deDuped.length === 0) {\r\n        current = current.filter(c => c.x !== x || c.y !== x)\r\n    }\r\n\r\n    // Only use filtered number pool if it isn't empty.\r\n    const y = getRandomNumberFromPool(\r\n      deDuped.length === 0 ? filteredNumberPool : deDuped\r\n    );\r\n\r\n    const v = {\r\n      x: x,\r\n      y: y,\r\n    };\r\n\r\n    current.push(v);\r\n\r\n    return v;\r\n  });\r\n};\r\n\r\nconst partial11Filter = (numberPool : ReadonlyArray<number>) => (n : number) => {\r\n    if (n !== 11)\r\n        return true;\r\n    \r\n    const totalOver10 = numberPool.filter(n => n > 10).length\r\n\r\n    return  Math.random() < totalOver10/numberPool.length;\r\n}\r\n\r\nconst filterEasy11TimesTable = (x: number) => (n: number) => {\r\n  if (x < 11) {\r\n    return n !== 11;\r\n  } else if (x === 11) {\r\n    return n > 10;\r\n  } else {\r\n    return true;\r\n  }\r\n};\r\n\r\nconst filterDuplicates =\r\n  (chosenX: number, currentVariables: ReadonlyArray<QuestionVaraibles>) =>\r\n  (n: number) => {\r\n    return !(\r\n      currentVariables.findIndex(\r\n        (v) => (chosenX === v.x && n === v.y) || (chosenX === v.y && n === v.x)\r\n      ) > -1\r\n    );\r\n  };\r\n","import React from \"react\";\r\nimport { makeStyles, Theme } from \"@material-ui/core\";\r\nimport clsx from \"clsx\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => {\r\n  return {\r\n    root: {\r\n      borderStyle: \"solid\",\r\n      borderWidth: \"1px\",\r\n      width: \"2em\",\r\n      height: \"1.5em\",\r\n    },\r\n  };\r\n});\r\n\r\ninterface Props {\r\n  className?: string;\r\n}\r\n\r\nconst TestGrid: React.FC<Props> = (props: Props) => {\r\n  const classes = useStyles();\r\n\r\n  return <div className={clsx(classes.root, props.className)}></div>;\r\n};\r\n\r\nexport default TestGrid;\r\n","import React from \"react\";\r\nimport { makeStyles, Theme, Typography } from \"@material-ui/core\";\r\nimport { QuestionVaraibles } from \"../question-generator/model\";\r\nimport AnswerBox from \"./AnswerBox\";\r\nimport clsx from \"clsx\";\r\n\r\nconst useStyles = (props: Props) =>\r\n  makeStyles((theme: Theme) => {\r\n    return {\r\n      root: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        padding: theme.spacing(2),\r\n        height: 26,\r\n      },\r\n      indent: {\r\n        marginLeft: \"0.25em\",\r\n      },\r\n      typography: {\r\n        fontSize: props.fontSize,\r\n      },\r\n    };\r\n  });\r\n\r\ninterface Props {\r\n  readonly variables: QuestionVaraibles;\r\n  readonly isFlipped?: boolean;\r\n  readonly showAnswers: boolean;\r\n  readonly fontSize: number;\r\n}\r\n\r\nconst TimesTable: React.FC<Props> = (props: Props) => {\r\n  const classes = useStyles(props)();\r\n\r\n  console.log(props.fontSize);\r\n\r\n  const valueToHide = props.showAnswers ? 10000 : Math.floor(Math.random() * 3);\r\n\r\n  TimesTable.defaultProps = {\r\n    isFlipped: false,\r\n  };\r\n\r\n  const renderAnswer = () => {\r\n    return valueToHide === 0 ? (\r\n      <AnswerBox\r\n        className={clsx(classes.typography, !props.isFlipped && classes.indent)}\r\n      />\r\n    ) : (\r\n      <Typography\r\n        className={clsx(classes.typography, !props.isFlipped && classes.indent)}\r\n      >\r\n        {props.variables.y * props.variables.x}\r\n      </Typography>\r\n    );\r\n  };\r\n\r\n  const renderVariables = () => {\r\n    return (\r\n      <>\r\n        {valueToHide === 1 ? (\r\n          <AnswerBox\r\n            className={clsx(\r\n              classes.typography,\r\n              props.isFlipped && classes.indent\r\n            )}\r\n          />\r\n        ) : (\r\n          <Typography\r\n            className={clsx(\r\n              classes.typography,\r\n              props.isFlipped && classes.indent\r\n            )}\r\n          >\r\n            {props.variables.x}\r\n          </Typography>\r\n        )}\r\n        <Typography className={clsx(classes.typography, classes.indent)}>\r\n          {\" \"}\r\n          x{\" \"}\r\n        </Typography>\r\n        {valueToHide === 2 ? (\r\n          <AnswerBox className={clsx(classes.typography, classes.indent)} />\r\n        ) : (\r\n          <Typography className={clsx(classes.typography, classes.indent)}>\r\n            {props.variables.y}\r\n          </Typography>\r\n        )}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {props.isFlipped ? renderAnswer() : renderVariables()}\r\n      <Typography className={clsx(classes.typography, classes.indent)}>\r\n        =\r\n      </Typography>\r\n      {props.isFlipped ? renderVariables() : renderAnswer()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimesTable;\r\n","import React from \"react\";\r\nimport { makeStyles, Theme, Typography } from \"@material-ui/core\";\r\nimport { QuestionVaraibles } from \"../question-generator/model\";\r\nimport AnswerBox from \"./AnswerBox\";\r\nimport clsx from \"clsx\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => {\r\n  return {\r\n    root: {\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n      padding: theme.spacing(2),\r\n      height: 26,\r\n    },\r\n    indent: {\r\n      marginLeft: \"0.25em\",\r\n    },\r\n    typography: {\r\n      fontSize: (props: Props) => props.fontSize,\r\n    },\r\n  };\r\n});\r\n\r\ninterface Props {\r\n  readonly variables: QuestionVaraibles;\r\n  readonly isFlipped?: boolean;\r\n  readonly showAnswers: boolean;\r\n  readonly fontSize: number;\r\n}\r\n\r\nconst TimesTable: React.FC<Props> = (props: Props) => {\r\n  const classes = useStyles(props);\r\n\r\n  const valueToHide = props.showAnswers ? 10000 : Math.floor(Math.random() * 3);\r\n\r\n  const renderAnswer = () => {\r\n    return valueToHide === 0 ? (\r\n      <AnswerBox\r\n        className={clsx(classes.typography, !props.isFlipped && classes.indent)}\r\n      />\r\n    ) : (\r\n      <Typography\r\n        className={clsx(classes.typography, !props.isFlipped && classes.indent)}\r\n      >\r\n        {props.variables.y}\r\n      </Typography>\r\n    );\r\n  };\r\n\r\n  const renderVariables = () => {\r\n    return (\r\n      <>\r\n        {valueToHide === 1 ? (\r\n          <AnswerBox\r\n            className={clsx(\r\n              classes.typography,\r\n              props.isFlipped && classes.indent\r\n            )}\r\n          />\r\n        ) : (\r\n          <Typography\r\n            className={clsx(\r\n              classes.typography,\r\n              props.isFlipped && classes.indent\r\n            )}\r\n          >\r\n            {props.variables.y * props.variables.x}\r\n          </Typography>\r\n        )}\r\n        <Typography className={clsx(classes.typography, classes.indent)}>\r\n          {\" \"}\r\n          ÷{\" \"}\r\n        </Typography>\r\n        {valueToHide === 2 ? (\r\n          <AnswerBox className={clsx(classes.typography, classes.indent)} />\r\n        ) : (\r\n          <Typography className={clsx(classes.typography, classes.indent)}>\r\n            {props.variables.x}\r\n          </Typography>\r\n        )}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {props.isFlipped ? renderAnswer() : renderVariables()}\r\n      <Typography className={clsx(classes.typography, classes.indent)}>\r\n        =\r\n      </Typography>\r\n      {props.isFlipped ? renderVariables() : renderAnswer()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimesTable;\r\n","import React from \"react\";\r\nimport { makeStyles, Theme } from \"@material-ui/core\";\r\nimport { QuestionVaraibles } from \"../question-generator/model\";\r\nimport TimesTable from \"./TimesTable\";\r\nimport Division from \"./Division\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => {\r\n  return {\r\n    root: {\r\n      display: \"grid\",\r\n      gridTemplateColumns: (props: Props) =>\r\n        `repeat(${props.numberOfColumns}, 1fr)`,\r\n      gridTemplateRows: (props: Props) => `repeat(${props.numberOfRows}, 1fr)`,\r\n    },\r\n    item: {\r\n      borderStyle: \"dotted\",\r\n      borderWidth: \"2px\",\r\n      margin: \"1px\",\r\n      borderColor: theme.palette.grey[300],\r\n    },\r\n  };\r\n});\r\n\r\ninterface Props {\r\n  readonly numberOfColumns: number;\r\n  readonly numberOfRows: number;\r\n  readonly variables: ReadonlyArray<QuestionVaraibles>;\r\n  readonly showAnswers: boolean;\r\n  readonly fontSize: number;\r\n}\r\n\r\nconst TestGrid: React.FC<Props> = (props: Props) => {\r\n  const classes = useStyles(props);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {props.variables.map((v, i) => {\r\n        return (\r\n          <div className={classes.item} key={i}>\r\n            {Math.random() > 0.5 ? (\r\n              <TimesTable\r\n                showAnswers={props.showAnswers}\r\n                isFlipped={Math.random() > 0.5}\r\n                key={i}\r\n                variables={v}\r\n                fontSize={props.fontSize}\r\n              />\r\n            ) : (\r\n              <Division\r\n                showAnswers={props.showAnswers}\r\n                isFlipped={Math.random() > 0.5}\r\n                key={i}\r\n                variables={v}\r\n                fontSize={props.fontSize}\r\n              />\r\n            )}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TestGrid;\r\n","import React from \"react\";\nimport { makeStyles, Paper, Theme, Typography } from \"@material-ui/core\";\nimport Configuration from \"./components/Configuration\";\nimport { questionVaraiblesGenerator } from \"./question-generator/questionGenerator\";\nimport { defaultNumberExcludes, numberOptions } from \"./model\";\nimport { QuestionVaraibles } from \"./question-generator/model\";\nimport TestGrid from \"./components/TestGrid\";\n\nconst useStyles = makeStyles((theme: Theme) => {\n  return {\n    root: {\n      display: \"block\",\n      justifyContent: \"center\",\n    },\n    container: {\n      paddingTop: theme.spacing(2),\n      width: \"75%\",\n    },\n    paper: {\n      padding: theme.spacing(1),\n      marginBottom: theme.spacing(2),\n      backgroundColor: theme.palette.grey[200],\n    },\n    title: {\n      width: \"100%\",\n    },\n    [`@media print`]: {\n      paper: {\n        display: \"none\",\n      },\n    },\n  };\n});\n\nconst App: React.FC = () => {\n  const [numberOfcolumns, setNumberOfColumns] = React.useState(5);\n  const [numberOfRows, setNumberOfRows] = React.useState(10);\n  const [selectedNumbers, setSelectedNumbers] = React.useState<\n    ReadonlyArray<number>\n  >(numberOptions.filter((x) => defaultNumberExcludes.indexOf(x) === -1));\n  const [questionVariables, setQuestionVariables] = React.useState<\n    ReadonlyArray<QuestionVaraibles>\n  >([]);\n  const [fontSize, setFontSize] = React.useState(16);\n\n  const handleNumberOfColumnsChanged = (x: number) => {\n    setNumberOfColumns(x);\n    const varaibles = questionVaraiblesGenerator(\n      selectedNumbers,\n      x * numberOfRows\n    );\n    setQuestionVariables(varaibles);\n  };\n\n  const handleNumberOfRowsChanged = (x: number) => {\n    setNumberOfRows(x);\n    const varaibles = questionVaraiblesGenerator(\n      selectedNumbers,\n      numberOfcolumns * x\n    );\n    setQuestionVariables(varaibles);\n  };\n\n  const handleSelectedNumbersChanged = (numbers: ReadonlyArray<number>) => {\n    setSelectedNumbers(numbers);\n    const varaibles = questionVaraiblesGenerator(\n      numbers,\n      numberOfcolumns * numberOfRows\n    );\n    setQuestionVariables(varaibles);\n  };\n\n  const handleGenerate = () => {\n    const varaibles = questionVaraiblesGenerator(\n      selectedNumbers,\n      numberOfcolumns * numberOfRows\n    );\n    setQuestionVariables(varaibles);\n  };\n\n  const handleIncreaseFontSize = () => {\n    setFontSize(fontSize + 1);\n  };\n\n  const handleDecreaseFontSize = () => {\n    setFontSize(fontSize - 1);\n  };\n\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <div className={classes.container}>\n        <Paper className={classes.paper}>\n          <Typography>Times Tables Test Generator</Typography>\n          <Configuration\n            onGenerate={handleGenerate}\n            selectedNumbers={selectedNumbers}\n            columns={numberOfcolumns}\n            rows={numberOfRows}\n            onSelectedNumbersChanged={handleSelectedNumbersChanged}\n            onNumberOfColumnsChanged={handleNumberOfColumnsChanged}\n            onNumberOfRowsChanged={handleNumberOfRowsChanged}\n            onIncreaseFontSize={handleIncreaseFontSize}\n            onDecreaseFontSize={handleDecreaseFontSize}\n          />\n        </Paper>\n        <TestGrid\n          showAnswers={false}\n          variables={questionVariables}\n          numberOfColumns={numberOfcolumns}\n          numberOfRows={numberOfRows}\n          fontSize={fontSize}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}